mod channel_simulation;
mod gui;

use eframe::egui;
use hound;
//use Dsp::signal::signal_vec::SignalPieceVec;
use Dsp::SignalDynamic::Signal;
use FileSystemManager::FileSystemManager;
use ModulationsManagerDynamic::{traits::Modulator, *};

const AUDIO_FILE_NAME: &str = "file.wav";
const AUDIO_FILE_NAME_NOISE: &str = "file_with_noise.wav";

fn main() {
    println!("Hello! This is a Channel Simulator!");

    println!("For now NO input is requested to yuo because I'm lazy");

    // Read the File
    let bytes = FileSystemManager::read().expect("Impossible read");

    let options = eframe::NativeOptions {
        initial_window_size: Some(egui::vec2(320.0, 240.0)),
        ..Default::default()
    };

    eframe::run_native(
        "My egui App",
        options,
        Box::new(|_cc| Box::new(gui::Gui::new(bytes))),
    )
    .expect("Something went wrong in the window")
}

// This struct will be used to provide EVERY information to the
// GUI to show everything
struct ChannelOutput {
    moduled_signal: Signal,
    moduled_signal_after_channel: Signal,
    demoduled_signal: Signal,
    demoduled_bytes: Vec<u8>,
    samples_per_symbol: usize,
}

impl core::fmt::Debug for ChannelOutput {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> Result<(), core::fmt::Error> {
        write!(f, "CHANNEL OUTPUT")
    }
}

fn channel_simulator(
    bytes: &Vec<u8>,
    modulation: &AvaiableModulation,
    noise_variance: f32,
    delay: f32,
    additional_end_time: f32,
) -> Result<ChannelOutput, &'static str> {
    // Add ErrorCorrection

    // Clone is not the best solution but if I want
    // to use try_from to get the real modulation
    // than it does not make sense to have a reference
    let modulation =
        Modulation::try_from(modulation.clone()).map_err(|_| "IMP create modulation")?;

    // Module
    let mut moduled_signal = modulation
        .module(&bytes.clone())
        .map_err(|_| "IMP modulation")?;

    // SIMULATE CHANNEL

    // -> AWGN
    let mut moduled_signal_after_channel = moduled_signal.clone();
    channel_simulation::add_delay(&mut moduled_signal_after_channel, delay);
    channel_simulation::add_additional_samples(
        &mut moduled_signal_after_channel,
        additional_end_time,
    );
    channel_simulation::add_noise_awgn(&mut moduled_signal_after_channel, noise_variance);

    // NEED to adapt the signal between 0 and 1
    // (due to .wav file that accept only values between zero and one)
    // expect that this is also the minimum
    // TODO: that was so stupid
    /*
    let max: f32 = *moduled_signal
        .inner_ref()
        .iter()
        .enumerate()
        .max_by(|(_, a), (_, b)| a.total_cmp(b))
        .map(|(_, val)| val)
        .ok_or("IMP find max")?;
    */
    // abs max
    let max = *moduled_signal
        .inner_ref()
        .iter()
        .max_by(|x, y| {
            x.abs()
                .partial_cmp(&y.abs())
                .expect("Impossible comparison with NaN")
        })
        .ok_or("IMP find max")?;
    //.map_err(|_| "IMP find max")?;

    moduled_signal.apply_function(|v| *v = *v / max);
    moduled_signal_after_channel.apply_function(|v| *v = *v / max);

    // Set up wav channel specification
    let spec = hound::WavSpec {
        channels: 1,
        sample_rate: modulation.rate() as u32,
        bits_per_sample: 16,
        sample_format: hound::SampleFormat::Int,
    };
    let amplitude = i16::MAX as f32;
    // TODO: THIS IS REALLY STUPID, HOW THIS CAN WORK??

    // Save to .wav
    let write_to_file = |name: &str, signal: &Signal| -> Result<(), &'static str> {
        let mut writer = hound::WavWriter::create(name, spec)
            // REALLY THERE'S NO WAY TO DO SOMETHING LIKE THIS?!?!?
            //.map_err(|_| format!("ERROR create wav file {name}"))?;
            .map_err(|_| "ERROR creating wav file")?;
        // TODO: find a way to avoid this clone,
        // (this should be something with .iter and not .into_iter)
        for sample in signal.inner_ref() {
            writer
                .write_sample((sample * amplitude) as i16)
                .expect("Impossible write sample")
        }
        writer
            .finalize()
            //.map_err(|_| format!("ERROR save wav file {name}").as_str())?;
            .map_err(|_| "ERROR saving wav file")?;
        Ok(())
    };

    write_to_file(AUDIO_FILE_NAME, &moduled_signal)?;
    write_to_file(AUDIO_FILE_NAME_NOISE, &moduled_signal_after_channel)?;

    // Read from .wav
    let mut reader = hound::WavReader::open(AUDIO_FILE_NAME_NOISE)
        .map_err(|_| "IMP find file wav to demodule")?;
    let mut moduled_bytes_from_wav: Signal = (
        reader
            .samples::<i16>()
            .map(|s| {
                s.expect("ERROR Impossible get sample from wav file") as f32 / amplitude as f32
            })
            .collect::<Vec<f32>>(),
        modulation.rate(),
    )
        .into();

    // BEFORE demoduling the signal must be adjusted
    moduled_bytes_from_wav.apply_function(|v| *v = *v * max);

    // LOL => That's not totally true
    /*
    assert_eq!(
        moduled_signal_after_channel.clone().inner(),
        moduled_bytes_from_wav.clone().inner()
    );
    */

    // Demodule
    // TODO: is really ok to demodule from the .wav file?
    let demoduled_bytes = modulation
        .demodule(moduled_bytes_from_wav)
        .map_err(|_| "IMP demodule")?;

    // Resolve error correction

    // Write back the file -> this will manage by the gui
    //FileSystemManager::write(demoduled_bytes).expect("Impossible write");

    Ok(ChannelOutput {
        moduled_signal,
        moduled_signal_after_channel,
        // TODO: this is not the better solution but should work for now
        demoduled_signal: modulation
            .module(&demoduled_bytes)
            .map_err(|_| "Impossibel REmodule")?,
        demoduled_bytes,
        samples_per_symbol: modulation.samples_per_symbol(),
    })
}
